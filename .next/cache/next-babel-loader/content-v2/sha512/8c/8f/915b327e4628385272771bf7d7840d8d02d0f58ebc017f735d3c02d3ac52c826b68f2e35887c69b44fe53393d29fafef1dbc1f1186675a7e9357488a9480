{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\REACT\\\\nextjsproject\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nexport var __N_SSG = true;\nexport default function MeetupDetails() {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\n    title: \"First meetup\",\n    address: \"some street, some city\",\n    description: \"This is a first meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["C:/Users/User/Desktop/REACT/nextjsproject/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MeetupDetails"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AACA,eAAe,SAASC,aAAT,GAAyB;AACtC,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,wHADR;AAEE,IAAA,KAAK,EAAC,cAFR;AAGE,IAAA,OAAO,EAAC,wBAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;KATuBA,a","sourcesContent":["import { Fragment } from \"react\";\r\nimport { MongoClient } from \"mongodb\";\r\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nexport default function MeetupDetails() {\r\n  return (\r\n    <MeetupDetail\r\n      image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\"\r\n      title=\"First meetup\"\r\n      address=\"some street, some city\"\r\n      description=\"This is a first meetup\"\r\n    />\r\n  );\r\n}\r\nexport async function getStaticPaths() {\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://lorena99:lorena99@cluster0.mbklnlh.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n\r\n  return {\r\n    //fallback: false - to indicate that I defined all supported paths\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n//getSttaicPaths-returns an obj all the dynamic segment values all the meetups id s for which this page should be pre generated- this obj contains a array of paths which has an obj per version of the dynamic page-obj has a params key-which then itself is an obj with all the key values pairs that might lead to your dynamic page/our meetupId with the concrete value 'm1' for the meetupId for which this page should be pre generated\r\nexport async function getStaticProps(context) {\r\n  //fetch data for a single meeetup\r\n  const meetupId = context.params.meetupId;\r\n  console.log(meetupId);\r\n  //that will be an obj where our identifiers bet the square brackets will be properties and the values will be the actual values encoded in the url/meetupId-the identifier that we chose\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        image:\r\n          \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Stadtbild_M%C3%BCnchen.jpg/1280px-Stadtbild_M%C3%BCnchen.jpg\",\r\n        id: meetupId,\r\n        title: \"First meetup\",\r\n        address: \"some street, some city\",\r\n        description: \"This is a first meetup\",\r\n      },\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}